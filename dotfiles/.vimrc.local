" spf13 overrides, unused from programming group
" UnBundle 'scrooloose/syntastic'
"disable indentation white spaces coloring
let g:indent_guides_enable_on_vim_startup = 0

" turn hybrid line numbers on
set number relativenumber

" wrap long lines
set wrap linebreak nolist

set fileencoding=utf-8
set encoding=utf-8
set nofoldenable
set nospell
colorscheme gruvbox
" colorscheme solarized
set nobackup
set noswapfile


" ##############################
" ### git conflict: conflict marker ######################
" ##############################
" if &diff
"     colorscheme mycolorscheme
" endif
" disable the default highlight group
let g:conflict_marker_highlight_group = ''

" Include text after begin and end markers
let g:conflict_marker_begin = '^<<<<<<< .*$'
let g:conflict_marker_end   = '^>>>>>>> .*$'

highlight ConflictMarkerBegin guibg=#2f7366
highlight ConflictMarkerOurs guibg=#2e5049
highlight ConflictMarkerTheirs guibg=#344f69
highlight ConflictMarkerEnd guibg=#2f628e
highlight ConflictMarkerCommonAncestorsHunk guibg=#754a81



" ##############################
" ### SHORTCUTS ######################
" ##############################
nnorema ; :
" clear highlighted search matches
nmap <slient> ,/ :nohlsearch<CR>
" for saving files which require root privileges"
cmap w!! w !sudo tee % >/dev/null


" ###################
" ### NerdCommenter #
" ###################
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTraillingWhitespace=1
map <slient ,c :NERDTreeClose<CR>
map <leader>p :NERDTreeCWD<CR>


" ##############################
" ### COC ######################
" ##############################
"
" show definition
nnoremap <silent> K :call CocAction('doHover')<CR>
" show diagnostic
nnoremap <silent> <space>d :<C-u>CocList diagnostics<cr>
" navigate to errors
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" code action
nmap <leader>do <Plug>(coc-codeaction)
" rename symbol
nmap <leader>rn <Plug>(coc-rename)
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=500
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


" vim-terraform config
autocmd BufEnter *.tf* colorscheme icansee
" auto format with terraform fmt on save
let g:terraform_fmt_on_save=1
" intent with 2 space
let g:terraform_align=1



" automatically show either the diagnostic if it exists, otherwise the documentation
" function! ShowDocIfNoDiagnostic(timer_id)
"   if (coc#util#has_float() == 0)
"     silent call CocActionAsync('doHover')
"   endif
" endfunction

" function! s:show_hover_doc()
"   call timer_start(500, 'ShowDocIfNoDiagnostic')
" endfunction

" autocmd CursorHoldI * :call <SID>show_hover_doc()
" autocmd CursorHold * :call <SID>show_hover_doc()


" Sessionman
set viminfo='100,<500,s10,h,!
let sessionman_save_on_exit = 1

" function! ReadSession()
" SessionOpenLast
" endfunction
" " if no file args then open the last session
" autocmd VimEnter * if argc() == 0 | call ReadSession() | endif

" use 4 space tabs in python
aug python
    " ftype/python.vim overwrites this
    au FileType python setlocal ts=4 sts=4 sw=4 expandtab
aug end



" Vimwiki
let g:vimwiki_global_ext = 0
let wiki_1 = {}
let wiki_1.path = '~/work/vimwiki/'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'

let g:vimwiki_list = [wiki_1]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
